{"entries":[{"timestamp":1752430871573,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables>"],[1,"www.w3.org/1999/xhtml\">\n  "],[0,"<blo"]],"start1":12,"start2":12,"length1":70,"length2":37},{"diffs":[[0,"art\""],[-1," x=\"0\" y=\"0\""],[0,"></b"]],"start1":67,"start2":67,"length1":20,"length2":8},{"diffs":[[0,"</block>"],[1,"\n  "],[0,"<block t"]],"start1":72,"start2":72,"length1":16,"length2":19},{"diffs":[[0,"ver\""],[-1," x=\"205\" y=\"0\""],[0,"></b"]],"start1":107,"start2":107,"length1":22,"length2":8},{"diffs":[[0,"</block>"],[1,"\n"],[0,"</xml>"]],"start1":112,"start2":112,"length1":14,"length2":15}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"/*\nThe code of namespace cutebotProV2 is taken from the ElecFreaks 'v2.ts' library:\nhttps://github.com/elecfreaks/pxt-Cutebot-Pro/blob/master/v2.ts\n(MIT-license)\n*/\nnamespace cutebotProV2 {\n\n    const cutebotProAddr = 0x10\n//    let fourWayStateValue = 0\n//    let timeDelay = 500\n\n    function delay_ms(ms: number) {\n        let endTime = input.runningTime() + ms;\n        while (endTime > input.runningTime()) {\n\n        }\n    }\n\n    export function i2cCommandSend(command: number, params: number[]) {\n        let buff = pins.createBuffer(params.length + 4);\n        buff[0] = 0xFF;\n        buff[1] = 0xF9;\n        buff[2] = command;\n        buff[3] = params.length;\n        for (let i = 0; i < params.length; i++) {\n            buff[i + 4] = params[i];\n        }\n        pins.i2cWriteBuffer(cutebotProAddr, buff);\n        delay_ms(1);\n    }\n\n    /**\n     * motorControl\n     * wheel:0-liftwheel，1-rightwheel，2-allwheel\n     * leftSpeed:[-100, 100]\n     * rightSpeed:[-100, 100]\n     */\n    export function motorControl(wheel: number, leftSpeed: number, rightSpeed: number): void {\n\n        let direction: number = 0;\n\n        if (leftSpeed < 0) {\n            direction |= 0x01;\n        }\n\n        if (rightSpeed < 0) {\n            direction |= 0x2;\n        }\n\n        i2cCommandSend(0x10, [wheel, Math.abs(leftSpeed), Math.abs(rightSpeed), direction]);\n\n    }\n}\n\nfunction handle(cmd:number) {\n}\n\nfunction display() {\n}"],[1,"\n"]],"start1":0,"start2":0,"length1":1421,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," \"*\""],[-1,",\n        \"pxt-soccer\": \"github:CBurg-College/pxt-soccer#be81e41443dff162ee6604f56c1224a4957bc064\""],[0,"\n"],[1,""],[0,"    "]],"start1":144,"start2":144,"length1":107,"length2":9},{"diffs":[[0,"   \""],[-1,"preferredEditor\": \"tsprj\""],[1,"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":241,"start2":241,"length1":32,"length2":31}]}]},{"timestamp":1752431388537,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"   }"],[-1,"\n\n    /**\n    * set LED headlights.\n    * wheel:0-liftlight，1-rightlight，2-alllight\n    */\n    export function colorLight(light: number, color: number) {\n        let r: number, g: number, b: number = 0\n        r = color >> 16\n        g = (color >> 8) & 0xFF\n        b = color & 0xFF\n\n        i2cCommandSend(0x20, [light, Math.abs(r), Math.abs(g), Math.abs(b)]);\n    }\n\n    /**\n    * select a headlights and set the RGB color.\n    * @param R R color value of RGB color, eg: 0\n    * @param G G color value of RGB color, eg: 128\n    * @param B B color value of RGB color, eg: 255\n    */\n    export function singleHeadlights(light: number, r: number, g: number, b: number): void {\n        i2cCommandSend(0x20, [light, Math.abs(r), Math.abs(g), Math.abs(b)]);\n    }\n\n    /**\n    * turn off all the LED lights\n    */\n    export function turnOffAllHeadlights(): void {\n        i2cCommandSend(0x20, [2, 0, 0, 0]);\n    }"],[0,"\n}\n\n"]],"start1":1358,"start2":1358,"length1":919,"length2":8}]}]},{"timestamp":1752431478753,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,") {\n"],[-1,"    let speedL = 0\n    \n    cutebotProV2.motorControl(2, speedL, speedR);\n"],[0,"}\n\nf"]],"start1":2303,"start2":2303,"length1":82,"length2":8}]}]},{"timestamp":1752432077277,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"/*\nThe code below is adjusted from the ElecFreaks 'main.ts' library:\nhttps://github.com/elecfreaks/pxt-Cutebot-Pro/blob/master/main.ts\n(MIT-license)\n*/\n\nenum ServoIndex {\n    //% block=\"S1\"\n    S1 = 1,\n    //% block=\"S2\"\n    S2 = 2,\n    //% block=\"S3\"\n    S3 = 3,\n    //% block=\"S4\"\n    S4 = 4\n}\n\nenum ServoType {\n    //% block=\"180°\"\n    Servo180 = 1,\n    //% block=\"270°\"\n    Servo270 = 2,\n    //% block=\"360°\"\n    Servo360 = 3\n}\n\n"],[0,"/*\nT"]],"start1":0,"start2":0,"length1":437,"length2":4},{"diffs":[[0," is "],[-1,"adjusted"],[1,"taken"],[0," fro"]],"start1":37,"start2":37,"length1":16,"length2":13},{"diffs":[[0," }\n\n"],[-1,"    /**\n     * servo control module\n     */\n    //% group=\"Expansion port\"\n    //% weight=120\n    //% block=\"set %ServoType servo %CutebotProServoIndex angle to %angle°\"\n    export function extendServoControl(servotype: ServoType, index: ServoIndex, angle: number): void {\n        cutebotProV2.extendServoControl(servotype, index, angle);\n    }\n\n"],[0,"    "]],"start1":1360,"start2":1360,"length1":354,"length2":8},{"diffs":[[0," = 0"],[-1," // percentage 0-100\n    let speedR = 0 // percentage 0-100"],[1,"\n    "],[0,"\n   "]],"start1":2321,"start2":2321,"length1":67,"length2":13}]}]},{"timestamp":1752432663509,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"Control("],[1,"wheel: number, "],[0,"leftSpee"]],"start1":1450,"start2":1450,"length1":16,"length2":31},{"diffs":[[0,"number): void {\n"],[1,"\n"],[0,"        let dire"]],"start1":1504,"start2":1504,"length1":32,"length2":33},{"diffs":[[0,"er = 0;\n"],[1,"\n"],[0,"        "]],"start1":1548,"start2":1548,"length1":16,"length2":17},{"diffs":[[0," (leftSpeed < 0)"],[1," {"],[0,"\n            dir"]],"start1":1567,"start2":1567,"length1":32,"length2":34},{"diffs":[[0,"= 0x01;\n"],[1,"        }\n\n"],[0,"        "]],"start1":1609,"start2":1609,"length1":16,"length2":27},{"diffs":[[0,"eed < 0)"],[1," {"],[0,"\n       "]],"start1":1647,"start2":1647,"length1":16,"length2":18},{"diffs":[[0,"|= 0x2;\n"],[1,"        }\n\n"],[0,"        "]],"start1":1680,"start2":1680,"length1":16,"length2":27},{"diffs":[[0,"(0x10, ["],[-1,"2"],[1,"wheel"],[0,", Math.a"]],"start1":1721,"start2":1721,"length1":17,"length2":21},{"diffs":[[0,"irection]);\n"],[1,"\n"],[0,"    }\n\n    /"]],"start1":1780,"start2":1780,"length1":24,"length2":25},{"diffs":[[0," module\n     */\n"],[1,"    //% group=\"Expansion port\"\n    //% weight=120\n    //% block=\"set %ServoType servo %CutebotProServoIndex angle to %angle°\"\n"],[0,"    export funct"]],"start1":1828,"start2":1828,"length1":32,"length2":158},{"diffs":[[0,"unction "],[-1,"s"],[1,"extendS"],[0,"ervoCont"]],"start1":1982,"start2":1982,"length1":17,"length2":23},{"diffs":[[0,"rol("],[-1,"angle: number): void {\n        i2cCommandSend(0x40, [1"],[1,"servotype: ServoType, index: ServoIndex, angle: number): void {\n        cutebotProV2.extendServoControl(servotype, index"],[0,", angle"],[-1,"]"],[0,");\n "]],"start1":2005,"start2":2005,"length1":70,"length2":135},{"diffs":[[0,"edR)"],[-1,"\n    let angle = 0 // degree 0-180\n    cutebotProV2.extendServoControl(1, 1, angle)"],[1,";"],[0,"\n}\n\n"]],"start1":3211,"start2":3211,"length1":91,"length2":9}]}]},{"timestamp":1752433262861,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"Control\n"],[1,"     * wheel:0-liftwheel，1-rightwheel，2-allwheel\n"],[0,"     * l"]],"start1":1301,"start2":1301,"length1":16,"length2":65},{"diffs":[[0,"ule\n"],[-1,"     * angle: [0, 180]\n"],[0,"    "]],"start1":1784,"start2":1784,"length1":31,"length2":8},{"diffs":[[0,"set "],[-1,"the RGB color of selected led(s)\n    * led:0-left led, 1-right led，2-both leds\n    * r, g, b: value [0, 255] as off to bright"],[1,"LED headlights.\n    * wheel:0-liftlight，1-rightlight，2-alllight\n    */\n    export function colorLight(light: number, color: number) {\n        let r: number, g: number, b: number = 0\n        r = color >> 16\n        g = (color >> 8) & 0xFF\n        b = color & 0xFF\n\n        i2cCommandSend(0x20, [light, Math.abs(r), Math.abs(g), Math.abs(b)]);\n    }\n\n    /**\n    * select a headlights and set the RGB color.\n    * @param R R color value of RGB color, eg: 0\n    * @param G G color value of RGB color, eg: 128\n    * @param B B color value of RGB color, eg: 255"],[0,"\n   "]],"start1":1915,"start2":1915,"length1":133,"length2":564},{"diffs":[[0,"ion "],[-1,"ledColor(led"],[1,"singleHeadlights(light"],[0,": nu"]],"start1":2499,"start2":2499,"length1":20,"length2":30},{"diffs":[[0,"0x20, [l"],[-1,"ed"],[1,"ight"],[0,", Math.a"]],"start1":2599,"start2":2599,"length1":18,"length2":20},{"diffs":[[0,");\n    }"],[1,"\n\n    /**\n    * turn off all the LED lights\n    */\n    export function turnOffAllHeadlights(): void {\n        i2cCommandSend(0x20, [2, 0, 0, 0]);\n    }"],[0,"\n}\n\nfunc"]],"start1":2651,"start2":2651,"length1":16,"length2":167},{"diffs":[[0," percentage "],[-1,"[-100, "],[1,"0-"],[0,"100"],[-1,"]"],[0,"\n    let spe"]],"start1":2865,"start2":2865,"length1":35,"length2":29},{"diffs":[[0,"centage "],[-1,"[-100, "],[1,"0-"],[0,"100"],[-1,"]"],[0,"\n    cut"]],"start1":2908,"start2":2908,"length1":27,"length2":21},{"diffs":[[0,"Control("],[1,"2, "],[0,"speedL, "]],"start1":2944,"start2":2944,"length1":16,"length2":19},{"diffs":[[0,"ree "],[-1,"[0, "],[1,"0-"],[0,"180"],[-1,"]"],[0,"\n   "]],"start1":2995,"start2":2995,"length1":16,"length2":13},{"diffs":[[0,"otProV2."],[-1,"s"],[1,"extendS"],[0,"ervoCont"]],"start1":3014,"start2":3014,"length1":17,"length2":23},{"diffs":[[0,"ervoControl("],[1,"1, 1, "],[0,"angle)\n}\n\nfu"]],"start1":3029,"start2":3029,"length1":24,"length2":30}]}]},{"timestamp":1752433860567,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[1,"/*\nThe code below is adjusted from the ElecFreaks 'main.ts' library:\nhttps://github.com/elecfreaks/pxt-Cutebot-Pro/blob/master/main.ts\n(MIT-license)\n*/\n\nenum ServoIndex {\n    //% block=\"S1\"\n    S1 = 1,\n    //% block=\"S2\"\n    S2 = 2,\n    //% block=\"S3\"\n    S3 = 3,\n    //% block=\"S4\"\n    S4 = 4\n}\n\nenum ServoType {\n    //% block=\"180°\"\n    Servo180 = 1,\n    //% block=\"270°\"\n    Servo270 = 2,\n    //% block=\"360°\"\n    Servo360 = 3\n}\n\n"],[0,"/*\nThe c"]],"start1":0,"start2":0,"length1":8,"length2":441},{"diffs":[[0,"v2.ts' library:\n"],[-1,""],[0,"https://github.c"]],"start1":504,"start2":504,"length1":32,"length2":32},{"diffs":[[0,"r = 0x10"],[1,"\n//    let fourWayStateValue = 0\n//    let timeDelay = 500"],[0,"\n\n    fu"]],"start1":650,"start2":650,"length1":16,"length2":74},{"diffs":[[0,"ime()) {"],[1,"\n\n        "],[0,"}\n    }\n"]],"start1":841,"start2":841,"length1":16,"length2":26},{"diffs":[[0,"100]"],[-1," as percentage reverse to forward\n     * rightSpeed:[-100, 100] as percentage reverse to forward"],[1,"\n     * rightSpeed:[-100, 100]"],[0,"\n   "]],"start1":1333,"start2":1333,"length1":104,"length2":38},{"diffs":[[0,"|= 0x2;\n"],[1,""],[0,"        "]],"start1":1599,"start2":1599,"length1":16,"length2":16},{"diffs":[[0," }\n\n"],[-1,"    /**\n     * set the car to travel a specific distance(distance.max=6000cm, distance.min=0cm)\n     * @speed 20~50 cm/s \n     * @Direction 0-forward,1-backward\n     * @distance set the distance eg: 0\n     * @DistanceUnit 0-cms,1-inch\n     */\n    export function runDistance(speed: number, unitspeed: number, direction: number, distance: number, unit: number): void {\n        distance *= (unit == 0 ? 10 : 25.4)\n        let tempDistance = distance\n        let distance_h = distance >> 8;\n        let distance_l = distance & 0xFF;\n        let direction_flag = (direction == 0 ? 0 : 3);\n        if (unitspeed == 1) {\n            speed *= 25.4;\n        } else {\n            speed *= 10;\n        }\n        if (speed <= 0) {\n            speed = 0;\n        } else {\n            speed = (speed > 500 ? 500 : speed) < 200 ? 200 : speed;\n        }\n        let speed_h = speed >> 8;\n        let speed_l = speed & 0xFF;\n        i2cCommandSend(0x84, [distance_h, distance_l, speed_h, speed_l, direction_flag]);\n        pidPause(Math.round(tempDistance * 1.0 / 1000 * 8000 + 3000))\n    }\n\n"],[0,"    "]],"start1":1699,"start2":1699,"length1":1084,"length2":8}]}]},{"timestamp":1752434452945,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"ode "],[-1,"is a revision of the cutebotProV2 namespace of"],[1,"of namespace cutebotProV2 is adjusted from"],[0," the"]],"start1":8,"start2":8,"length1":54,"length2":50},{"diffs":[[0,"mespace "],[-1,"C"],[1,"c"],[0,"utebotPr"]],"start1":170,"start2":170,"length1":17,"length2":17},{"diffs":[[0," }\n\n"],[-1,"    export function pid_delay_ms(ms: number) {\n        let time = control.millis() + ms\n        while (1) {\n            i2cCommandSend(0xA0, [0x05])\n            if (pins.i2cReadNumber(cutebotProAddr, NumberFormat.UInt8LE, false) || control.millis() >= time) {\n                basic.pause(500)\n                break\n            }\n            basic.pause(10)\n        }\n    }\n\n"],[0,"    "]],"start1":363,"start2":363,"length1":382,"length2":8},{"diffs":[[0,"\n     * "],[-1,"run"],[1,"set the car to travel"],[0," a speci"]],"start1":1275,"start2":1275,"length1":19,"length2":37},{"diffs":[[0,"  * "],[1,"@"],[0,"speed"],[-1,": [20, 50] in"],[1," 20~50"],[0," cm/"]],"start1":1367,"start2":1367,"length1":26,"length2":20},{"diffs":[[0,"\n     * "],[-1,"d"],[1,"@D"],[0,"irection"],[-1,":"],[0," 0-forwa"]],"start1":1389,"start2":1389,"length1":26,"length2":26},{"diffs":[[0,"forward,"],[-1," "],[0,"1-backwa"]],"start1":1410,"start2":1410,"length1":17,"length2":16},{"diffs":[[0,"  * "],[1,"@"],[0,"distance"],[-1,": [0, 6000] in cm"],[1," set the distance eg: 0\n     * @DistanceUnit 0-cms,1-inch"],[0,"\n   "]],"start1":1432,"start2":1432,"length1":33,"length2":74},{"diffs":[[0," number,"],[1," unitspeed: number,"],[0," directi"]],"start1":1549,"start2":1549,"length1":16,"length2":35},{"diffs":[[0,"istance:"],[1," number, unit:"],[0," number)"]],"start1":1597,"start2":1597,"length1":16,"length2":30},{"diffs":[[0," *= "],[-1,"10\n        speed *= 10"],[1,"(unit == 0 ? 10 : 25.4)"],[0,"\n   "]],"start1":1652,"start2":1652,"length1":30,"length2":31},{"diffs":[[0,"0 : 3);\n"],[1,"        if (unitspeed == 1) {\n            speed *= 25.4;\n        } else {\n            speed *= 10;\n        }\n"],[0,"        "]],"start1":1845,"start2":1845,"length1":16,"length2":125},{"diffs":[[0," pid"],[-1,"_delay_ms"],[1,"Pause"],[0,"(Mat"]],"start1":2274,"start2":2274,"length1":17,"length2":13},{"diffs":[[0,"0, 100]\n    "],[-1,"C"],[1,"c"],[0,"utebotProV2."]],"start1":2947,"start2":2947,"length1":25,"length2":25},{"diffs":[[0,"80]\n    "],[-1,"C"],[1,"c"],[0,"utebotPr"]],"start1":3034,"start2":3034,"length1":17,"length2":17}]}]},{"timestamp":1752434994722,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"ay() {\n}"],[-1,"\n"]],"start1":3279,"start2":3279,"length1":9,"length2":8}]}]},{"timestamp":1752435883895,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"y() {\n}\n"],[-1,"namespa"]],"start1":3280,"start2":3280,"length1":15,"length2":8}]}]},{"timestamp":1752435903549,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"iables><"],[1,"block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block><block type=\"device_forever\" x=\"205\" y=\"0\"></block><"],[0,"/xml>"]],"start1":71,"start2":71,"length1":13,"length2":111}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"{\n}\n"],[-1,"\n//% color=\"#00CC00\" icon=\"\\uf1f9\"\n//% block=\"Soccer\"\n//% block.loc.nl=\"Voetbal\"\nnamespace CSoccerPlayer\n{\n    //% block=\"shoot\"\n    //% block.loc.nl=\"schiet\"\n    export function shoot() {\n    }\n\n    //% block=\"dribble %cm cm\"\n    //% block.loc.nl=\"dribbel %cm cm\"\n    //% cm.max=10 cm.min=2\n    export function dribble(cm: number) {\n    }\n\n    //% block=\"aim at the goal\"\n    //% block.loc.nl=\"richt op het doel\"\n    export function aim() {\n    }\n\n    //% block=\"run to the ball\"\n    //% block.loc.nl=\"ga naar de bal\"\n    export function find() {\n    }\n\n    //% block=\"aim at the ball\"\n    //% block.loc.nl=\"richt op de bal\"\n    export function locate() {\n    }\n}"],[1,"namespa"]],"start1":3284,"start2":3284,"length1":668,"length2":11}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," ],\n"],[-1,"    \"testFiles\": [\n        \"test.ts\"\n    ],\n"],[0,"    "]],"start1":334,"start2":334,"length1":52,"length2":8}]},{"type":"added","filename":"test.ts","value":"// tests gaan hier; deze zal niet worden gecompileerd wanneer dit pakket wordt gebruikt als extensie.\n"}]}],"snapshots":[{"timestamp":1752430871572,"editorVersion":"7.0.61","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"pxt-soccer-player\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1752432695237,"editorVersion":"7.0.61","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block><block type=\"device_forever\" x=\"205\" y=\"0\"></block></xml>","main.ts":"/*\nThe code below is adjusted from the ElecFreaks 'main.ts' library:\nhttps://github.com/elecfreaks/pxt-Cutebot-Pro/blob/master/main.ts\n(MIT-license)\n*/\n\nenum ServoIndex {\n    //% block=\"S1\"\n    S1 = 1,\n    //% block=\"S2\"\n    S2 = 2,\n    //% block=\"S3\"\n    S3 = 3,\n    //% block=\"S4\"\n    S4 = 4\n}\n\nenum ServoType {\n    //% block=\"180°\"\n    Servo180 = 1,\n    //% block=\"270°\"\n    Servo270 = 2,\n    //% block=\"360°\"\n    Servo360 = 3\n}\n\n/*\nThe code of namespace cutebotProV2 is adjusted from the ElecFreaks 'v2.ts' library:\nhttps://github.com/elecfreaks/pxt-Cutebot-Pro/blob/master/v2.ts\n(MIT-license)\n*/\nnamespace cutebotProV2 {\n\n    const cutebotProAddr = 0x10\n//    let fourWayStateValue = 0\n//    let timeDelay = 500\n\n    function delay_ms(ms: number) {\n        let endTime = input.runningTime() + ms;\n        while (endTime > input.runningTime()) {\n\n        }\n    }\n\n    export function i2cCommandSend(command: number, params: number[]) {\n        let buff = pins.createBuffer(params.length + 4);\n        buff[0] = 0xFF;\n        buff[1] = 0xF9;\n        buff[2] = command;\n        buff[3] = params.length;\n        for (let i = 0; i < params.length; i++) {\n            buff[i + 4] = params[i];\n        }\n        pins.i2cWriteBuffer(cutebotProAddr, buff);\n        delay_ms(1);\n    }\n\n    /**\n     * motorControl\n     * wheel:0-liftwheel，1-rightwheel，2-allwheel\n     * leftSpeed:[-100, 100]\n     * rightSpeed:[-100, 100]\n     */\n    export function motorControl(wheel: number, leftSpeed: number, rightSpeed: number): void {\n\n        let direction: number = 0;\n\n        if (leftSpeed < 0) {\n            direction |= 0x01;\n        }\n\n        if (rightSpeed < 0) {\n            direction |= 0x2;\n        }\n\n        i2cCommandSend(0x10, [wheel, Math.abs(leftSpeed), Math.abs(rightSpeed), direction]);\n\n    }\n\n    /**\n     * servo control module\n     */\n    //% group=\"Expansion port\"\n    //% weight=120\n    //% block=\"set %ServoType servo %CutebotProServoIndex angle to %angle°\"\n    export function extendServoControl(servotype: ServoType, index: ServoIndex, angle: number): void {\n        cutebotProV2.extendServoControl(servotype, index, angle);\n    }\n\n    /**\n    * set LED headlights.\n    * wheel:0-liftlight，1-rightlight，2-alllight\n    */\n    export function colorLight(light: number, color: number) {\n        let r: number, g: number, b: number = 0\n        r = color >> 16\n        g = (color >> 8) & 0xFF\n        b = color & 0xFF\n\n        i2cCommandSend(0x20, [light, Math.abs(r), Math.abs(g), Math.abs(b)]);\n    }\n\n    /**\n    * select a headlights and set the RGB color.\n    * @param R R color value of RGB color, eg: 0\n    * @param G G color value of RGB color, eg: 128\n    * @param B B color value of RGB color, eg: 255\n    */\n    export function singleHeadlights(light: number, r: number, g: number, b: number): void {\n        i2cCommandSend(0x20, [light, Math.abs(r), Math.abs(g), Math.abs(b)]);\n    }\n\n    /**\n    * turn off all the LED lights\n    */\n    export function turnOffAllHeadlights(): void {\n        i2cCommandSend(0x20, [2, 0, 0, 0]);\n    }\n}\n\nfunction handle(cmd:number) {\n    let speedL = 0 // percentage 0-100\n    let speedR = 0 // percentage 0-100\n    cutebotProV2.motorControl(2, speedL, speedR);\n}\n\nfunction display() {\n}","README.md":"","pxt.json":"{\n    \"name\": \"pxt-soccer-player\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"pxt-soccer\": \"github:CBurg-College/pxt-soccer#be81e41443dff162ee6604f56c1224a4957bc064\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1752434503301,"editorVersion":"7.0.61","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block><block type=\"device_forever\" x=\"205\" y=\"0\"></block></xml>","main.ts":"/*\nThe code of namespace cutebotProV2 is adjusted from the ElecFreaks 'v2.ts' library:\nhttps://github.com/elecfreaks/pxt-Cutebot-Pro/blob/master/v2.ts\n(MIT-license)\n*/\nnamespace cutebotProV2 {\n\n    const cutebotProAddr = 0x10\n\n    function delay_ms(ms: number) {\n        let endTime = input.runningTime() + ms;\n        while (endTime > input.runningTime()) {}\n    }\n\n    export function i2cCommandSend(command: number, params: number[]) {\n        let buff = pins.createBuffer(params.length + 4);\n        buff[0] = 0xFF;\n        buff[1] = 0xF9;\n        buff[2] = command;\n        buff[3] = params.length;\n        for (let i = 0; i < params.length; i++) {\n            buff[i + 4] = params[i];\n        }\n        pins.i2cWriteBuffer(cutebotProAddr, buff);\n        delay_ms(1);\n    }\n\n    /**\n     * motorControl\n     * leftSpeed:[-100, 100] as percentage reverse to forward\n     * rightSpeed:[-100, 100] as percentage reverse to forward\n     */\n    export function motorControl(leftSpeed: number, rightSpeed: number): void {\n        let direction: number = 0;\n        if (leftSpeed < 0)\n            direction |= 0x01;\n        if (rightSpeed < 0)\n            direction |= 0x2;\n        i2cCommandSend(0x10, [2, Math.abs(leftSpeed), Math.abs(rightSpeed), direction]);\n    }\n\n    /**\n     * run a specific distance(distance.max=6000cm, distance.min=0cm)\n     * @speed 20~50 cm/s \n     * @Direction 0-forward,1-backward\n     * @distance set the distance eg: 0\n     * @DistanceUnit 0-cms,1-inch\n     */\n    export function runDistance(speed: number, unitspeed: number, direction: number, distance: number, unit: number): void {\n        distance *= (unit == 0 ? 10 : 25.4)\n        let tempDistance = distance\n        let distance_h = distance >> 8;\n        let distance_l = distance & 0xFF;\n        let direction_flag = (direction == 0 ? 0 : 3);\n        if (unitspeed == 1) {\n            speed *= 25.4;\n        } else {\n            speed *= 10;\n        }\n        if (speed <= 0) {\n            speed = 0;\n        } else {\n            speed = (speed > 500 ? 500 : speed) < 200 ? 200 : speed;\n        }\n        let speed_h = speed >> 8;\n        let speed_l = speed & 0xFF;\n        i2cCommandSend(0x84, [distance_h, distance_l, speed_h, speed_l, direction_flag]);\n        pidPause(Math.round(tempDistance * 1.0 / 1000 * 8000 + 3000))\n    }\n\n    /**\n     * servo control module\n     * angle: [0, 180]\n     */\n    export function servoControl(angle: number): void {\n        i2cCommandSend(0x40, [1, angle]);\n    }\n\n    /**\n    * set the RGB color of selected led(s)\n    * led:0-left led, 1-right led，2-both leds\n    * r, g, b: value [0, 255] as off to bright\n    */\n    export function ledColor(led: number, r: number, g: number, b: number): void {\n        i2cCommandSend(0x20, [led, Math.abs(r), Math.abs(g), Math.abs(b)]);\n    }\n}\n\nfunction handle(cmd:number) {\n    let speedL = 0 // percentage [-100, 100]\n    let speedR = 0 // percentage [-100, 100]\n    cutebotProV2.motorControl(speedL, speedR)\n    let angle = 0 // degree [0, 180]\n    cutebotProV2.servoControl(angle)\n}\n\nfunction display() {\n}","README.md":"","pxt.json":"{\n    \"name\": \"pxt-soccer-player\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"pxt-soccer\": \"github:CBurg-College/pxt-soccer#be81e41443dff162ee6604f56c1224a4957bc064\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}}],"shares":[],"lastSaveTime":1752436154629}